<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.1;net20;net35</TargetFrameworks>
    <AssemblyName>RunSharp</AssemblyName>
    <RootNamespace>TriAxis.RunSharp</RootNamespace>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DocumentationFile>o:\Dropbox\CodeProjects\RunSharp\src\RunSharp\RunSharp.xml</DocumentationFile>
  </PropertyGroup>
  <PropertyGroup>
    <VersionPrefix>1.0.21</VersionPrefix>
  </PropertyGroup>
  <PropertyGroup>
    <GenerateAssemblyInfo>true</GenerateAssemblyInfo>
    <SignAssembly Condition="'$(TargetFramework)'!='netstandard2.1'">true</SignAssembly>
    <AssemblyOriginatorKeyFile>runsharp_key.snk</AssemblyOriginatorKeyFile>
    <PackageId>aqla.runsharp</PackageId>
    <Description>RunSharp is a runtime IL generator based on Reflection.Emit and IKVM which allows you to emit IL in a way similar to writing normal C# code.

      It's a layer above the standard .NET Reflection.Emit API, allowing to generate/compile dynamic code at runtime very quickly and efficiently (unlike using CodeDOM and invoking the C# compiler).

      Platforms:

      * .NET Standard 2.1 (including .NET Core 3 and .NET 5)
      * .NET 2.0 and higher including .NET 4 (also IKVM version available)
      * Windows Phone 8
      * Silverlight 5

      The IKVM version has also an ability to emit NET 2.0 and .NET 4.0 assemblies (while running on, for example, .NET 3.0).

      This package is a fork of TriAxis.RunSharp (the original is now abandoned).</Description>
    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
    <PackageProjectUrl></PackageProjectUrl>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageReleaseNotes>* 1.0.0.20 - added .NET standard 2.1 support and .NET 5 tests, removed separate Xamarin.Android (use .NET Standard build instead)
* 1.0.0.18 - fix for explicit interface implementation, added Android platform
* 1.0.0.17 - IKVM reference won't be added for nuget installations
* 1.0.0.16 - multidimensional array access, fix for AND/OR operands
* 1.0.0.15 - added nullables support, multiple improvements
* 0.2.0.5 - operand leaking detection
* 0.2.0.4 - added support for Silverlight 4
* 0.2.0.3 - added support for Windows Phone 8
* 0.2.0.0 - initial fork release:
- added IKVM support
- examples converted to tests
- added peverify checks
- fixed multiple bugs
</PackageReleaseNotes>
    <PackageTags>Reflection.Emit</PackageTags>
    <RepositoryUrl>https://github.com/AqlaSolutions/runsharp</RepositoryUrl>
    <Authors>Vladyslav Taranov 2020, fork source from Stefan Simek 2009</Authors>
  </PropertyGroup>
  <PropertyGroup>
    <DocumentationFile>o:\Dropbox\CodeProjects\RunSharp\src\RunSharp\RunSharp.xml</DocumentationFile>
  </PropertyGroup> 
  <PropertyGroup>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <AssemblyVersion>1.0.22.0</AssemblyVersion>
    <FileVersion>1.0.22.0</FileVersion>
  </PropertyGroup>
  <Import Project="..\RunSharpShared\RunSharpShared.projitems" Label="Shared" />
  <ItemGroup Condition="'$(TargetFramework)'=='netstandard2.1'">
    <PackageReference Include="Lokad.ILPack" Version="0.1.6" />
  </ItemGroup>
  <ItemGroup>
    <None Include="..\LICENSE">
      <Link>LICENSE</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Include="..\LICENSE">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>
  <ItemGroup>
    <Compile Update="Properties\Messages.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Messages.resx</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Update="Properties\Messages.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Messages.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <Content Include="..\bin-unsupported\**\*">
      <PackagePath>lib\</PackagePath>
      <Pack>true</Pack>
    </Content>
  </ItemGroup>
  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec Condition="'$(TargetFramework)'!='netstandard2.1'" Command="&quot;$(MSBuildProjectDirectory)\..\tools\AOTCompatlyzer.exe&quot; &quot;$(TargetDir)$(TargetFileName)&quot; &quot;$(MSBuildProjectDirectory)\runsharp_key.snk&quot;" />
  </Target>
</Project>